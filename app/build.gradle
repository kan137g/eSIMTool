plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
//    id 'kotlin-android-extensions'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'maven-publish'
}

android {
    namespace 'com.linksfield.lpa_example'
    compileSdk 33

    defaultConfig {
        applicationId "com.linksfield.lpa_example"
        minSdk 24
        targetSdk 33
        versionCode 8
        versionName "1.0.8.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('../demo.jks')
            keyAlias 'linksfield'
            keyPassword 'linksfield'
            storePassword 'linksfield'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

def roomVersion = '2.4.2'

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation 'com.github.kan137g:eSIM:1.0.7.2'


    implementation "io.grpc:grpc-okhttp:1.64.0"
    implementation "io.grpc:grpc-protobuf-lite:1.64.0"
    implementation "io.grpc:grpc-stub:1.64.0"
    implementation 'com.squareup.okhttp3:okhttp:3.14.8'
    implementation 'org.apache.tomcat:annotations-api:6.0.53'

    //Android
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //navigation
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.0'

    //Android KTX 是一组 Kotlin 扩展程序，属于 Android Jetpack 系列
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //room
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    //协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    //recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'

    //refresh
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.3'
    implementation 'com.scwang.smart:refresh-header-material:2.0.3'
    //dialog
    implementation 'com.github.li-xiaojun:XPopup:2.8.3'
    //bugly
    implementation "com.tencent.bugly:crashreport:latest.release"
    //qrcode
    implementation 'com.github.kangzhou:QRzxingScan:1.0.3'
    //permission
    implementation 'com.afollestad.assent:core:3.0.0-RC4'

    implementation 'com.squareup.okhttp3:okhttp:3.14.8'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.8'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    implementation 'io.reactivex:rxjava:1.1.1'
}




//publishing {
//    // 配置maven 仓库
//    repositories { RepositoryHandler handler->
////        handler.mavenLocal()  // 发布到默认的 本地maven 仓库 ，路径： USER_HOME/.m2/repository/
//
//
//        //带有aar和pom等打包文件的输出目录，project.projectDir.parent：表示输出到当前项目的根目录
////        project.projectDir.parent
//
//        // 仓库用户名密码
//         handler.maven { MavenArtifactRepository mavenArtifactRepository ->
//             // maven 仓库地址
//             url 'https://github.com/kan137g/eSIM/'
//             // 访问仓库的 账号和密码
//             credentials {
//                 username = "kan137g"
//                 password = "jidiKANG"
//             }
//         }
//
//
//    }
//    // 配置发布产物
//    publications {PublicationContainer publication->
//        // 名称可以随便定义，这里定义成 maven，是因为我的 aar 包是发布到 maven 仓库的，所以这里为了见名知义，定义成了 maven
//
//
//        // 任务名称：maven
//        maven(MavenPublication) {// 容器可配置的信息 MavenPublication
//
//            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
////            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }// 方式一：生成aar包
//             artifact ".\\libs\\droidlib-1.0.7.1.aar" // 方式二：指定生成的aar路径
//            //组Id，即远程依赖库的包名
//            groupId = "com.akq.sdk"
//            //远程依赖库的库名
//            artifactId = "eSIM"
//            //版本号
//            version = "1.0.0"
//
//            // pom文件中声明依赖，从而传递到使用方
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//                configurations.implementation.allDependencies.each {
//                    // 避免出现空节点或 artifactId=unspecified 的节点
//                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
//                        println "dependency=${it.toString()}"
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                        dependencyNode.appendNode('scope', 'implementation')
//                    }
//                }
//            }
//
//
//        }
//    }
//
//}
//

